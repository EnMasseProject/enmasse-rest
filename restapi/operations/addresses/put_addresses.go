package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutAddressesHandlerFunc turns a function with the right signature into a put addresses handler
type PutAddressesHandlerFunc func(PutAddressesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutAddressesHandlerFunc) Handle(params PutAddressesParams) middleware.Responder {
	return fn(params)
}

// PutAddressesHandler interface for that can handle valid put addresses params
type PutAddressesHandler interface {
	Handle(PutAddressesParams) middleware.Responder
}

// NewPutAddresses creates a new http.Handler for the put addresses operation
func NewPutAddresses(ctx *middleware.Context, handler PutAddressesHandler) *PutAddresses {
	return &PutAddresses{Context: ctx, Handler: handler}
}

/*PutAddresses swagger:route PUT /v1/enmasse/addresses addresses putAddresses

Replace existing address config with a new

*/
type PutAddresses struct {
	Context *middleware.Context
	Handler PutAddressesHandler
}

func (o *PutAddresses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutAddressesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
