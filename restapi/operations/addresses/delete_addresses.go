package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteAddressesHandlerFunc turns a function with the right signature into a delete addresses handler
type DeleteAddressesHandlerFunc func(DeleteAddressesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAddressesHandlerFunc) Handle(params DeleteAddressesParams) middleware.Responder {
	return fn(params)
}

// DeleteAddressesHandler interface for that can handle valid delete addresses params
type DeleteAddressesHandler interface {
	Handle(DeleteAddressesParams) middleware.Responder
}

// NewDeleteAddresses creates a new http.Handler for the delete addresses operation
func NewDeleteAddresses(ctx *middleware.Context, handler DeleteAddressesHandler) *DeleteAddresses {
	return &DeleteAddresses{Context: ctx, Handler: handler}
}

/*DeleteAddresses swagger:route DELETE /v1/enmasse/addresses addresses deleteAddresses

Delete one or more addresses from the configuration

*/
type DeleteAddresses struct {
	Context *middleware.Context
	Handler DeleteAddressesHandler
}

func (o *DeleteAddresses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteAddressesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
