package addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new addresses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for addresses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAddress Create address config and append to existing map
*/
func (a *Client) CreateAddress(params *CreateAddressParams) (*CreateAddressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAddress",
		Method:             "POST",
		PathPattern:        "/v1/enmasse/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAddressReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAddressCreated), nil

}

/*
DeleteAddresses Delete one or more addresses from the configuration
*/
func (a *Client) DeleteAddresses(params *DeleteAddressesParams) (*DeleteAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAddresses",
		Method:             "DELETE",
		PathPattern:        "/v1/enmasse/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAddressesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAddressesOK), nil

}

/*
ListAddresses Returns the addressing configuration for the cluster
*/
func (a *Client) ListAddresses(params *ListAddressesParams) (*ListAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAddresses",
		Method:             "GET",
		PathPattern:        "/v1/enmasse/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAddressesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAddressesOK), nil

}

/*
PutAddresses Replace existing address config with a new
*/
func (a *Client) PutAddresses(params *PutAddressesParams) (*PutAddressesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAddresses",
		Method:             "PUT",
		PathPattern:        "/v1/enmasse/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAddressesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAddressesCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
